---

# Checks if the cluster is already initialized
- name: Check if Kubernetes cluster is already initialized
  ansible.builtin.stat:
    path: /etc/.k8s_node_joined_to_cluster
  register: kube_admin_conf_check



# If master number 1 and not initalized, run init command
- name: "config :: initializes the cluster (first master only)"
  # This task will only run on the first host listed in the 'masters' group
  # and only if the cluster has not already been initialized on that host.
  become: true
  ansible.builtin.shell: |
    kubeadm init --pod-network-cidr={{ kubernetes.CIDR }} \
      --apiserver-advertise-address {{ ansible_default_ipv4.address }} 
  register: init_result
  when:
    - not kube_admin_conf_check.stat.exists



# Save the output of the kubeadmin init command to be parsed later
- name: "config :: save kubeadm init output to file"
  # This task saves the standard output from the kubeadm init command
  # to a file on the target system for review or debugging.
  become: true
  ansible.builtin.copy:
    content: "{{ init_result.stdout }}"
    dest: "/opt/kubeadm_init_output.log"
    mode: '0644'
  when:
    - not kube_admin_conf_check.stat.exists
    - init_result.changed # Only save if kubeadm init actually ran and changed something





# After initializing the cluster on node 1 or joining on nodes 2 and 3, creates this file
- name: Create marker file to indicate first node joined cluster
  become: true
  ansible.builtin.file:
    path: /etc/.k8s_node_joined_to_cluster
    state: touch
    mode: '0644'
    owner: root
    group: root
  when:
    - not kube_admin_conf_check.stat.exists
    - init_result.changed



# After initializing the cluster on node 1, creates this file
- name: Create marker file to indicate second and third nodes joined cluster
  become: true
  ansible.builtin.file:
    path: /etc/.k8s_node_joined_to_cluster
    state: touch
    mode: '0644'
    owner: root
    group: root
  when:
    - not kube_admin_conf_check.stat.exists




# Create the .kube directory locally to downlaod the kube config file
- name: "config :: creates the .kube directory for kubectl config"
  # This directory is essential for storing the Kubernetes configuration file (`admin.conf`),
  # allowing `kubectl` to interact with the cluster.
  # It should be created on all control plane nodes where `kubectl` will be used.
  ansible.builtin.file:
    path: "{{ kubernetes.config | default(ansible_user_dir + '/.kube') }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  when:
    - not kube_admin_conf_check.stat.exists

- name: "config :: copies the configuration file to the home directory (first master only)"
  # The `admin.conf` file is generated by `kubeadm init` on the first master.
  # This task copies it to the appropriate user directory on that same master.
  become: true
  ansible.builtin.copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "{{ kubernetes.config | default(ansible_user_dir + '/.kube') }}/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
    remote_src: true
  when:
    - not kube_admin_conf_check.stat.exists # Only copy if cluster was just initialized

- name: "config :: fetches the configuration file to the local station (from first master only)"
  # This task fetches the `admin.conf` file from the first master to your
  # local Ansible control machine. `run_once: true` ensures it's only fetched once,
  # and the `when` condition targets the first master for the source.
  become: true
  ansible.builtin.fetch:
    src: "/etc/kubernetes/admin.conf"
    dest: "{{ lookup('env', 'HOME') }}/.kube/config"
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: "0755"
    flat: true
  run_once: true
  when:
    - not kube_admin_conf_check.stat.exists # Only fetch if cluster was just initialized


