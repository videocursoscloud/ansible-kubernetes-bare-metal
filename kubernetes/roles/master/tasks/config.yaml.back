---
- name: Check if Kubernetes cluster is already initialized
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: kube_admin_conf_check

- name: "config :: initializes the cluster (first master only)"
  # This task will only run on the first host listed in the 'masters' group
  # and only if the cluster has not already been initialized on that host.
  become: true
  ansible.builtin.shell: |
    kubeadm init --pod-network-cidr={{ kubernetes.CIDR }} \
      --apiserver-advertise-address {{ ansible_default_ipv4.address }}
  register: init_result
  when:
    - not kube_admin_conf_check.stat.exists
    - is_first_node

- name: "config :: Extract control plane join command from init output"
  # This task extracts the 'kubeadm join' command for control plane nodes
  # from the stdout of the 'kubeadm init' command.
  # It sets a fact on the first master, which will then be accessible
  # by other masters via 'hostvars'.
  ansible.builtin.set_fact:
    kube_control_plane_join_command: "{{ init_result.stdout | splitlines | select('match', '^kubeadm join .*--control-plane') | first }}"
  when:
    # Only run if 'kubeadm init' was executed and changed the system (i.e., initialized the cluster)
    - init_result.changed is defined and init_result.changed
    - is_first_node

- name: "config :: Join cluster as control plane node (other masters)"
  # This task will run on all masters *except* the first one.
  # It uses the 'kube_control_plane_join_command' fact extracted from the first master.
  become: true
  ansible.builtin.shell: |
    {{ hostvars[groups['masters'][0]]['kube_control_plane_join_command'] }}
  when:
    - not kube_admin_conf_check.stat.exists # Only join if cluster isn't already initialized on this node
    - not is_first_node 

    - hostvars[groups['masters'][0]]['kube_control_plane_join_command'] is defined # Ensure the join command is available
    - hostvars[groups['masters'][0]]['kube_control_plane_join_command'] | length > 0 # Ensure the join command is not empty

- name: "config :: creates the .kube directory for kubectl config"
  # This directory is essential for storing the Kubernetes configuration file (`admin.conf`),
  # allowing `kubectl` to interact with the cluster.
  # It should be created on all control plane nodes where `kubectl` will be used.
  ansible.builtin.file:
    path: "{{ kubernetes.config | default(ansible_user_dir + '/.kube') }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"

- name: "config :: copies the configuration file to the home directory (first master only)"
  # The `admin.conf` file is generated by `kubeadm init` on the first master.
  # This task copies it to the appropriate user directory on that same master.
  become: true
  ansible.builtin.copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "{{ kubernetes.config | default(ansible_user_dir + '/.kube') }}/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
    remote_src: true
  when:
    - not kube_admin_conf_check.stat.exists # Only copy if cluster was just initialized
    -  is_first_node 

- name: "config :: fetches the configuration file to the local station (from first master only)"
  # This task fetches the `admin.conf` file from the first master to your
  # local Ansible control machine. `run_once: true` ensures it's only fetched once,
  # and the `when` condition targets the first master for the source.
  become: true
  ansible.builtin.fetch:
    src: "/etc/kubernetes/admin.conf"
    dest: "{{ lookup('env', 'HOME') }}/.kube/config"
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: "0755"
    flat: true
  run_once: true
  when:
    - not kube_admin_conf_check.stat.exists # Only fetch if cluster was just initialized
    - is_first_node
